AWSTemplateFormatVersion: 2010-09-09
Description: |
  Prerequisites for Release demo, creates an IAM role that your Release Job (a container) 
  will assume to execute your Terraform configuration within your account. Also creates
  an S3 bucket to store state files for your project.

# Within your ephemeral environment, your Teraform code will run under the context of
# of the EC2 worker node IAM role of your Release EKS cluster. This role has a limited
# permission set which won't be sufficient for Terraform. However, this role *does* have
# the ability to assume IAM roles namespaced under a /release/ path.
# 
# So, in order for your Terraform job to create ephemeral resources (and read/write your
# state files to Amazon S3), you will need to pre-create an IAM role, e.g. /release/terraform,
# that has the needed IAM policies and a trust policy that allows the EKS worker node role
# to assume it. 
# 
# This CloudFormation template creates an IAM role for Terraform as described above, along with
# an S3 bucket to store state files for environments create as part of this demonstration. 

Parameters:
  BucketNamePrefix: 
    Type: String
    Default: release-demo-of-terraform
    Description: | 
      Used to help name the demo bucket that your custom Release Job will later
      use to store your Terraform state.


Resources:
  EphemeralTerraformStateBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "${BucketNamePrefix}-${AWS::AccountId}"
      Tags:
        - Key: purpose
          Value: Release demo of running custom Terraform

  ReleaseTerraformRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: "demo_role_for_terraform_job"
      Path: "/release/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub "arn:aws:iam::${AWS::AccountId}:root"     
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                - ec2:DescribeAccountAttributes
                - ssm:DescribeParameters
                - ssm:ListTagsForResource
                - sts:GetCallerIdentity
                Resource: "*"
                
              - Effect: Allow
                Action:
                - iam:CreatePolicy
                - iam:DeletePolicy
                - iam:GetPolicy
                - iam:GetPolicyVersion
                - iam:ListPolicyVersions
                - iam:TagPolicy
                - iam:UntagPolicy
                Resource: !Sub "arn:aws:iam::${AWS::AccountId}:policy/release/*"

              - Effect: Allow
                Action:
                - iam:AttachRolePolicy
                - iam:CreateRole
                - iam:DeleteRole
                - iam:DetachRolePolicy
                - iam:GetRole
                - iam:ListAttachedRolePolicies
                - iam:ListInstanceProfilesForRole
                - iam:ListRolePolicies
                - iam:TagRole
                - iam:UntagRole
                Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/release/*"
                
              - Effect: Allow
                Action:
                - iam:PassRole
                Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/release/*"
                Condition: 
                  StringEquals:
                    "iam:PassedToService": "lambda.amazonaws.com"
                  StringLike:
                    "iam:AssociatedResourceArn": !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:release-*"
 
              - Effect: Allow
                Action:
                - lambda:CreateFunction
                - lambda:DeleteFunction
                - lambda:GetFunction
                - lambda:GetFunctionCodeSigningConfig
                - lambda:ListVersionsByFunction
                - lambda:TagResource
                - lambda:UntagResource
                Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:release-*"

              - Effect: Allow
                Action:
                - logs:CreateLogGroup
                - logs:DeleteLogGroup
                - logs:DescribeLogGroups
                - logs:ListTagsLogGroup
                - logs:TagLogGroup
                - logs:UntagLogGroup
                - logs:PutRetentionPolicy
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/release-*"
              
              - Effect: Allow
                Action:
                - logs:DescribeLogGroups
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
             
              - Effect: Allow
                Action:
                - ssm:DeleteParameter
                - ssm:GetParameter
                - ssm:GetParameters
                - ssm:PutParameter
                - ssm:ListTagsForResource
                - ssm:AddTagsToResource
                - ssm:RemoveTagsFromResource
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/release/*"
              - Effect: Allow
                Action:
                - s3:ListBucket
                - s3:GetBucketLocation
                - s3:ListObjects
                - s3:GetObject
                - s3:PutObject
                Resource: 
                  - !Sub "${EphemeralTerraformStateBucket.Arn}/*"
                  - !Sub "${EphemeralTerraformStateBucket.Arn}"
