---
# These are injected to all containers in your application template (e.g. 
# jobs and services). These do not get injected during the Docker image
# builf if using Release for builds. Instead, use the separate Build Arguments
# described in our documentation (https:://docs.releasehub.com):
defaults:
# This is a variabe we are making up that we only inject when running in a real
# Release environment in the cloud. It's absence allows us to adapt for testing
# on our local machine:
- key: IS_RELEASE_ENVIRONMENT
  value: "true"

# Convenient way to to create a a copy of a Release-provided environment variable
# with a name that you prefer to use in your application code: 
mapping:
  TF_VAR_RELEASE_ACCOUNT_ID: RELEASE_ACCOUNT_ID
  TF_VAR_RELEASE_APP_NAME: RELEASE_APP_NAME
  TF_VAR_RELEASE_ENV_ID: RELEASE_ENV_ID
  TF_VAR_RELEASE_BRANCH_NAME: RELEASE_BRANCH_NAME
  TF_VAR_RELEASE_COMMIT_SHORT: RELEASE_COMMIT_SHORT
  TF_VAR_RELEASE_COMMIT_SHA: RELEASE_COMMIT_SHA

services:
  terraform:
    # AWS region that Terraform in which will create infrastructure
    - key: TF_VAR_AWS_DEFAULT_REGION
      value: "us-west-2"

    # AWS Role that Terraform will assume to perform deployments.
    # This role is created when you run ./setup.sh in the root of this project repo
    # as part of the prerequisite steps to follow before creating this app in Release.
    # Note - if you create a role,it must have a path prefix of /release/, as in 
    # "/release/MY_ROLE_123". 
    - key: TERRAFORM_DEPLOYMENT_ROLE_NAME     
      value: "release/demo_role_for_terraform_job"

    # This should be the prefix of the bucket to hold your Terraform state that defined in 
    # examples/prerequisites/cloudformation.yaml.
    - key: TERRAFORM_STATE_BUCKET_NAME_PREFIX
      value: release-demo-of-terraform

    # AWS region of the bucket Terraform will use to store state:
    - key: TERRAFORM_STATE_BUCKET_REGION
      value: us-west-2
